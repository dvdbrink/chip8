#pragma once

#include <array>
#include <cstdint>
#include <fstream>
#include <string>
#include <stdexcept>

namespace chip8
{

static const std::array<uint8_t, 80> fontset =
{{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
}};

template <std::size_t N>
class Memory : public std::array<uint8_t, N>
{
public:
	Memory()
	{
		for (uint32_t i = 0; i < fontset.size(); ++i)
		{
			(*this).at(i) = fontset.at(i);
		}
	}

    explicit Memory(const std::string& fileName)
		: Memory()
	{
		std::ifstream file{fileName, std::ios::in | std::ios::binary};

		if (file.is_open())
		{
			uint32_t i = 0x200;
			while (!file.eof())
			{
				uint8_t b = file.get();
				(*this).at(i++) = b;
			}
			file.close();
		}
		else
		{
			throw std::runtime_error("Unable to open ROM");
		}
	}
};

}
